Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1

********************************************************************************
class Solution {
    public int singleNumber(int[] nums) {
       /* Bitwise XOR of same element will give zero*
       If only one element is not repeated, after XORing all elements of the array, the single number will be the result
       /
        /*int res = 0;
        for(int i=0;i<nums.length;i++){
            res = res^nums[i];
        }
        return res;*/
        if (nums.length == 1) {
            return nums[0];
        }
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 1; i += 2) {
            if (nums[i] != nums[i + 1]) {
                return nums[i];
            }
        }
        
        return nums[nums.length - 1];
    }
}

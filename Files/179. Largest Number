Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"


*************************************************************************************

class Solution {
    public String largestNumber(int[] nums) {
        if(nums.length == 0)
        return "";

        String[] s_nums = new String[nums.length];
        for(int i=0;i<nums.length;i++){
            s_nums[i] = String.valueOf(nums[i]);
        }

        /**
        
        Implement a custom string comparator to determine which combination comes first
        like s1+s2 or s2+s1

        String s1 = "9";
        String s2 = "31";

        String case1 =  s1 + s2; // 931
        String case2 = s2 + s1; // 319

         */
        Comparator<String> comp = new Comparator<String>(){
            @Override
            public int compare(String s1, String s2){
                String str1 = s1+s2;
                String str2 = s2+s1;
                return str2.compareTo(str1);
            }
        };
        Arrays.sort(s_nums,comp);
        if(s_nums[0].charAt(0) == '0')
        return "0";

        StringBuilder sb = new StringBuilder();
        for(String s: s_nums){
            sb.append(s);
        }

        return sb.toString();
    }
}

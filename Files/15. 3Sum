Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


**********************************************************************************

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        /** Have a set of arraylist to get unique results */
        Set<List<Integer>> result = new HashSet<>();
        int sum = 0;
        int left= 0;
        int right = 0;
        Arrays.sort(nums);
        /** sort the array since we need to return the elemnts and not the index */
        for(int i=0;i<nums.length-2;i++){
            /**
            
            have 3 pointers, and check for their sum
            first pointer will be the current element
            second pointer will the next element to the current
            third pointer will be the last element in the array
             */
            left = i+1;
            right = nums.length-1;
            while(left<right){
                //Find the sum by adding all pointers
                //If sum equal to target add the elements at the pointer to the set
                //If sum is greater than the target, decremnt the last pointer
                // If sum is less than the target, increment the next pointer after current pointer
                sum = nums[i] + nums[left]+nums[right];
                if(sum > 0)
                right--;
                else if(sum == 0)
                {
                    result.add(Arrays.asList(nums[i],nums[left++],nums[right--]));
                }
                else if(sum < 0)
                left++;
            }
        }
        return new ArrayList<>(result);
    }
}

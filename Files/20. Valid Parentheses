Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

****************************************************************************


class Solution {
    public boolean isValid(String s) {
        

        /**
        Have one stack
        When you see an open bracket push the corresponding closing bracket to stack.
        if the parentheses order is not proper, you will see closing brackets before open or open and closing brackets of different type. In the case stack will be empty

        when you see closing brackets, the top of the stack must be opening bracket of the same type

        if the string is valid, the stack must be empty at the end
         */

         Stack<Character> st = new Stack<>();
         for(char c: s.toCharArray()){
             if(c == '{')
                st.push('}');
             else if(c == '(')
                st.push(')');
              else if(c == '[')
                st.push(']');
              else if(st.isEmpty() || st.pop()!=c)
              return false;
         }
         return st.isEmpty();
    }
}

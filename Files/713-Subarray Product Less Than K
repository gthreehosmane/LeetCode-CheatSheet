**********************************************************************
Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.

Example 1:

Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.
Example 2:

Input: nums = [1,2,3], k = 0
Output: 0

**********************************************************************

class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int i=0,j=0,count=0,product=1;
        if(k<=1)
        return 0;
        /*keep on multiplying the elements
reach to a point where product is less than target.
now increase the count of sub arrays with sub array length.
The catch here is if the product of subarray elements is less that target, then all elements must also be less than target. individual element is also a valid sub array. 
*/
        while(j<nums.length){
            product*=nums[j];
            while(product>=k){
                product=product/nums[i++];
            }
            count+=(j-i+1);
            j++;
        }
        return count;
    }
}

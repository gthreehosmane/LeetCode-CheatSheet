*********************************************************************************************************************************
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.
Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

*********************************************************************************************************************************

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        /*
        Store the numbers and their occurrences in a map.
         */
        Map<Integer,Integer> mp = new HashMap<>();
        for(int i=0;i<arr.length;i++){
            mp.put(arr[i],mp.getOrDefault(arr[i],0)+1);
        }

        /**
        Now check if all the occurrences are unique.
        1. Use set
        2. Or sort the occurences and compare adjacent elements
        In both cases we need extra space. 
        Time complexity O(n)
        Space complexity O(n)
         */

        Set<Integer> st = new HashSet<>();
         for(Integer key:mp.keySet())
         st.add(mp.get(key));

         return st.size() == mp.size();
         
    }
}

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.
Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
********************************************************************************************************************
class Solution {
    public boolean canJump(int[] nums) {
        
        /**
        for each element in the array, check if your current index is reachable or not
        if index is greater than the jump limit, you cannot jump so, return false

        if you can reach the index within jump limit, just update the limit.
        
         */
        int limit = 0;
        for(int i=0;i<nums.length;i++){
            if(i>limit)
            return false;
            limit = Math.max(limit,i+nums[i]);
        }
        return true;

        /**
        There is more more way to find to traverse from end, and is if you can reach start
         */
         int n = nums.length;
         int last = n-1;
         for(int i=n-2;i>=0;i--){
             if(i+nums[i]>=last)
             last = i;
         }
         return last<=0;


         
    }
}
